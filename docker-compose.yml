# Docker Compose for Boardroom Booking App
# Production-ready configuration with monitoring and backup

version: '3.8'

services:
  # Main application
  boardroom-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: boardroom-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=mongodb://mongodb:27017/boardroom_booking
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_APP_PASSWORD=${EMAIL_APP_PASSWORD}
      - IMAGEKIT_PUBLIC_KEY=${IMAGEKIT_PUBLIC_KEY}
      - IMAGEKIT_PRIVATE_KEY=${IMAGEKIT_PRIVATE_KEY}
      - IMAGEKIT_URL_ENDPOINT=${IMAGEKIT_URL_ENDPOINT}
      - BACKUP_DIR=/app/backups
      - MAX_BACKUPS=7
      - TZ=UTC
    volumes:
      - logs:/app/logs
      - backups:/app/backups
      - uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - boardroom-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB database
  mongodb:
    image: mongo:7.0
    container_name: boardroom-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=boardroom_booking
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - boardroom-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.admin.ping()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: mongod --auth

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: boardroom-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - boardroom-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: boardroom-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - boardroom-app
    networks:
      - boardroom-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB backup service
  mongo-backup:
    image: mongo:7.0
    container_name: boardroom-backup
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/boardroom_booking?authSource=admin
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION=7
    volumes:
      - backups:/backups
      - ./docker/backup-script.sh:/backup-script.sh:ro
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - boardroom-network
    command: sh -c "chmod +x /backup-script.sh && crond -f"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: boardroom-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - boardroom-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: boardroom-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - boardroom-network
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local
  backups:
    driver: local
  uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  boardroom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16